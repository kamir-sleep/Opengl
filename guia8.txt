
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import com.jogamp.newt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import com.jogamp.newt.opengl.GLWindow;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.util.FPSAnimator;
import com.jogamp.opengl.util.awt.ImageUtil;
import com.jogamp.opengl.util.texture.Texture;
import com.jogamp.opengl.util.texture.awt.AWTTextureIO;

public class Principal extends JFrame implements GLEventListener, KeyListener {
	private static final long serialVersionUID = 1L;
	float pos_x= 1;
	private String[] textureFileNames = {
			"apple.png",
			"linux.png",
			"windows.png"
	};
	private Texture[] textures = new Texture[textureFileNames.length];
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Principal ren= new Principal();
	}
	public Principal() {
		super("Programación Gráfica - OpenGL");
		this.setSize(640,480);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(false);
		GLProfile profile = GLProfile.get(GLProfile.GL2);
		GLCapabilities caps = new GLCapabilities(profile);
		GLCanvas canvas = new GLCanvas(caps);
		canvas.addGLEventListener(this);
		canvas.addKeyListener(this);
		this.add(canvas);
		this.setVisible(true);
		canvas.requestFocusInWindow();
		
		FPSAnimator animator = new FPSAnimator(canvas, 400, true);
	    animator.start();	    
	}
	
	@Override
	public void display(GLAutoDrawable drawable) {
		GL2 gl = drawable.getGL().getGL2();
		gl.glClearColor(1f, 1f, 1f, 0.0f);		
		gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT);

		gl.glMatrixMode(GL2.GL_PROJECTION);
		gl.glLoadIdentity();	
				gl.glPushMatrix();
				gl.glTranslatef(0, 0, 0);	
				gl.glColor3f(1,1,1);

				textures[0].bind(gl);
				gl.glBegin(GL2.GL_QUADS);
				gl.glTexCoord2f( 0.0f, 1.0f);gl.glVertex3f(-0.2f,0.2f,0.0f);
				gl.glTexCoord2f( 1.0f, 1.0f);gl.glVertex3f(0.2f,0.2f,0.0f);
				gl.glTexCoord2f( 1.0f, 0.0f);gl.glVertex3f(0.2f,-0.2f,0.0f);
				gl.glTexCoord2f( 0.0f, 0.0f);gl.glVertex3f(-0.2f,-0.2f,0.0f);
				gl.glEnd();
				
				gl.glTranslatef(0, 0, 0);	
				textures[1].bind(gl);
				gl.glBegin(GL2.GL_QUADS);
				gl.glTexCoord2f( 0.0f, 1.0f);gl.glVertex3f(-0.2f,0.2f,0.0f);
				gl.glTexCoord2f( 1.0f, 1.0f);gl.glVertex3f(0.2f,0.2f,0.0f);
				gl.glTexCoord2f( 1.0f, 0.0f);gl.glVertex3f(0.2f,-0.2f,0.0f);
				gl.glTexCoord2f( 0.0f, 0.0f);gl.glVertex3f(-0.2f,-0.2f,0.0f);
				gl.glEnd();
				gl.glTranslatef(0, 0, 0);	
				textures[2].bind(gl);
				gl.glBegin(GL2.GL_QUADS);
				gl.glTexCoord2f( 0.0f, 1.0f);gl.glVertex3f(-0.2f,0.2f,0.0f);
				gl.glTexCoord2f( 1.0f, 1.0f);gl.glVertex3f(0.2f,0.2f,0.0f);
				gl.glTexCoord2f( 1.0f, 0.0f);gl.glVertex3f(0.2f,-0.2f,0.0f);
				gl.glTexCoord2f( 0.0f, 0.0f);gl.glVertex3f(-0.2f,-0.2f,0.0f);
				gl.glEnd();
				gl.glPopMatrix();
		
		gl.glFlush();
	}
	@Override
	public void keyPressed(java.awt.event.KeyEvent e) {
		// TODO Auto-generated method stub
		int key = e.getKeyCode();	
		if (key==38) { //arriba
			pos_x +=0.01;  //contador del eje X
		}
		if (key==40) {//abajo 
			pos_x -=0.01;  //contador del eje X
		}
//		System.out.println("Tecla presionado::"+ key);		
	}
	
	@Override
	public void dispose(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub		
	}

	@Override
	public void init(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub
		GL2 gl2 = drawable.getGL().getGL2();
		gl2.glClearColor(0.392f, 0.584f, 0.929f, 1.0f);
		for (int i = 0; i < textureFileNames.length; i += 1) {
			BufferedImage img = null;
			try {
				img = ImageIO.read(new File("imgs2/" + textureFileNames[i]));
				ImageUtil.flipImageVertically(img);

				textures[i] = AWTTextureIO.newTexture(GLProfile.getDefault(), img, true);
				textures[i].setTexParameteri(gl2, GL2.GL_TEXTURE_WRAP_S, GL2.GL_REPEAT);
				textures[i].setTexParameteri(gl2, GL2.GL_TEXTURE_WRAP_T, GL2.GL_REPEAT);
				textures[i].enable(gl2);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}


		}
	}

	@Override
	public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3, int arg4) {
		// TODO Auto-generated method stub	
	}
	@Override
	public void keyTyped(java.awt.event.KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void keyReleased(java.awt.event.KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}

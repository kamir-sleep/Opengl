package GUIA10;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

import com.jogamp.common.nio.Buffers;
import com.jogamp.newt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.FloatBuffer;

import com.jogamp.newt.opengl.GLWindow;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLAutoDrawable;
import com.jogamp.opengl.GLCapabilities;
import com.jogamp.opengl.GLEventListener;
import com.jogamp.opengl.GLProfile;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.util.FPSAnimator;
import com.jogamp.opengl.util.awt.ImageUtil;
import com.jogamp.opengl.util.texture.Texture;
import com.jogamp.opengl.util.texture.awt.AWTTextureIO;

public class Guia10 extends JFrame implements GLEventListener, KeyListener {
	private static final long serialVersionUID = 1L;
	private String[] textureFileNames = {
			"arriba.png",
			"carretera.png",
			"paisaje01.png"
	};
	private Texture[] textures = new Texture[textureFileNames.length];
	//CAMINO
	private float[] triangleCoords = {
    		0f,0f,0.0f, 
    		2f,0f,0.0f, 
    		2f,0.5f,0.0f, 
    		1.25f,1.3f,0.0f, 
    		0.75f,1.3f,0.0f, 
    		0f,0.55f,0.0f,
			
    };
	private float[] triangleTexture = {
    		0f,0,0, 
    		1f,0f,0, 
    		1f,0.20f,0, 
    		0.55f,0.35f,0, 
    		0.41f,0.35f,0, 
    		0f,0.25f,0, //es el dibujo de adentro es mover las texturas como ya sabes
    };
	
	private FloatBuffer triangleCoordBuffer = Buffers.newDirectFloatBuffer(triangleCoords);
	private FloatBuffer triangleTextureBuffer = Buffers.newDirectFloatBuffer(triangleTexture);
	
	private float[] luzAmbiente = {1f, 1f, 0f, 1f };
	private float[] luzDifusa = {1f, 1f, 1f, 0f };  //RGBA ESTE ES EL COLOR DE FONDO
	private float[] luzPos = {-0.5f, 0.0f, 0.9f, 0f };
	//plantas
	private float[] triangleCoordsV = {
    		-1f,-0.2f,0.0f, 
    		-1f,-2.2f,0.0f, 
    		0.8f,-0.2f,0.0f,
    		3f,-0.2f,0.0f, 
    		3f,-2.2f,0.0f, 
    		1.2f,-0.2f,0.0f,
    		
			
    };
	private float[] triangleTextureV = {
    		0f,0.53f,0, 
    		0f,-0.33f,0, 
    		0.83f,0.25f,0, 
    		-1f,0.53f,0, 
    		-1f,-0.3f,0, 
    		-0.1f,0.25f,0,
    		
    };
	private FloatBuffer triangleCoordBufferV = Buffers.newDirectFloatBuffer(triangleCoordsV);
	private FloatBuffer triangleTextureBufferV = Buffers.newDirectFloatBuffer(triangleTextureV);
	
	
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Guia10 ren= new Guia10();
	}
	public Guia10() {
		super("Programaci칩n Gr치fica - OpenGL");
		this.setSize(640,480);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setResizable(false);
		
		GLProfile profile = GLProfile.get(GLProfile.GL2);
		GLCapabilities caps = new GLCapabilities(profile);
		GLCanvas canvas = new GLCanvas(caps);
		canvas.addGLEventListener(this);
		canvas.addKeyListener(this);
		
		this.add(canvas);
		this.setVisible(true);
		canvas.requestFocusInWindow();
		
		FPSAnimator animator = new FPSAnimator(canvas, 400, true);
	    animator.start();	    
	}
	//algoritmos mas colisiones de dos objetos,instancias,fotogramas
	@Override
	public void display(GLAutoDrawable drawable) {
		GL2 gl = drawable.getGL().getGL2();
		gl.glClearColor(1f, 1f, 1f, 0.0f);		
		gl.glClear(gl.GL_COLOR_BUFFER_BIT | gl.GL_DEPTH_BUFFER_BIT);

		gl.glVertexPointer( 3, GL2.GL_FLOAT, 0, triangleCoordBuffer );  
		gl.glTexCoordPointer( 3,GL2. GL_FLOAT, 0, triangleTextureBuffer );
		
		//Definir luz (tipo de luz, componente de la luz, array, )
				gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_AMBIENT, luzAmbiente, 0);
				gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_DIFFUSE, luzDifusa, 0);
				gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_POSITION, luzPos, 0);
		//Habilitar luz (tipo de luz)
		gl.glEnable(GL2.GL_LIGHT0);
		//ACTIVANDO
	    gl.glEnableClientState( GL2.GL_VERTEX_ARRAY );
	    gl.glEnableClientState( GL2.GL_COLOR_ARRAY );
	    gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
	    
	    gl.glMatrixMode(GL2.GL_PROJECTION);
		gl.glLoadIdentity();	
		
				textures[1].bind(gl);
				
				gl.glPushMatrix();
				gl.glTranslatef(-1f, -1f, 0);
//				gl.glColor3f(1,1,1);
				
				gl.glEnable(GL2.GL_LIGHTING);
				gl.glDrawArrays( GL2.GL_POLYGON, 0, 6 );
				
				gl.glDisable(GL2.GL_LIGHT0);
				gl.glPopMatrix();
				
		//triangulo
		gl.glVertexPointer( 3, GL2.GL_FLOAT, 0, triangleCoordBufferV );  
		gl.glTexCoordPointer( 3,GL2. GL_FLOAT, 0, triangleTextureBufferV );	
		//Definir luz (tipo de luz, componente de la luz, array, )
		gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_AMBIENT, luzAmbiente, 0);
		gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_DIFFUSE, luzDifusa, 0);
		gl.glLightfv(GL2.GL_LIGHT0, GL2.GL_POSITION, luzPos, 0);
		//Habilitar luz (tipo de luz)
		gl.glEnable(GL2.GL_LIGHT0);
		 gl.glEnableClientState( GL2.GL_VERTEX_ARRAY );
		    gl.glEnableClientState( GL2.GL_COLOR_ARRAY );
		    gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);
		    
		    gl.glMatrixMode(GL2.GL_PROJECTION);
			gl.glLoadIdentity();	
			
					textures[2].bind(gl);
					
					gl.glPushMatrix();
					gl.glTranslatef(-1f, 0.5f, 0);
					//plano
					gl.glPointSize(5); 
					gl.glBegin(GL2.GL_POINTS);
					gl.glVertex3f(0.0f, 0.0f, 0.0f);
					gl.glEnd();
					gl.glBegin (GL2.GL_LINES);
					gl.glVertex3f(-0.50f, 0.00f, 0);
					gl.glVertex3f(0.50f, 0.00f, 0);
					
					gl.glVertex3f(0.00f, 0.50f, 0);
					gl.glVertex3f(0.00f, -0.50f, 0);
					
					gl.glEnd();
//					gl.glColor3f(1,1,1);
					
					gl.glEnable(GL2.GL_LIGHTING);
					gl.glDrawArrays( GL2.GL_TRIANGLES, 0, 6 );
					
					gl.glDisable(GL2.GL_LIGHT0);
					gl.glPopMatrix();
				
		
		
		
		
		gl.glFlush();
		
	}
	
	@Override
	public void keyPressed(java.awt.event.KeyEvent e) {
		// TODO Auto-generated method stub
		int key = e.getKeyCode();	
		if (key==38) { //arriba
			//tama침o +=0.01;  //contador del eje X
		}
		if (key==40) {//abajo 
			//tama침o -=0.01;  //contador del eje X
		}
		//System.out.println("Tecla presionado::"+ key);		
	}
	
	@Override
	public void dispose(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub		
	}

	@Override
	public void init(GLAutoDrawable drawable) {
		// TODO Auto-generated method stub
		GL2 gl2 = drawable.getGL().getGL2();
		gl2.glClearColor(0.392f, 0.584f, 0.929f, 1.0f);
		
		for (int i = 0; i < textureFileNames.length; i += 1) {
			BufferedImage img = null;
			try {
				img = ImageIO.read(new File("img/" + textureFileNames[i]));
				ImageUtil.flipImageVertically(img);

				textures[i] = AWTTextureIO.newTexture(GLProfile.getDefault(), img, true);
				textures[i].setTexParameteri(gl2, GL2.GL_TEXTURE_WRAP_S, GL2.GL_REPEAT);
				textures[i].setTexParameteri(gl2, GL2.GL_TEXTURE_WRAP_T, GL2.GL_REPEAT);
				textures[i].enable(gl2);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}


		}
	}

	@Override
	public void reshape(GLAutoDrawable arg0, int arg1, int arg2, int arg3, int arg4) {
		// TODO Auto-generated method stub	
	}
	@Override
	public void keyTyped(java.awt.event.KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void keyReleased(java.awt.event.KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}

